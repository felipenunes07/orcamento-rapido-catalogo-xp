import { toast } from '@/components/ui/sonner'

// Flag para controlar se o reload foi solicitado pelo usu√°rio
let reloadRequested = false

// Armazena o worker waiting para uso posterior
let waitingWorker: ServiceWorker | null = null

export function registerServiceWorkerWithUpdates() {
  if (!('serviceWorker' in navigator)) {
    console.log('[SW] Service Worker n√£o √© suportado neste navegador')
    return
  }

  console.log('[SW] Aguardando evento load para registrar SW...')

  window.addEventListener('load', () => {
    console.log('[SW] P√°gina carregada, iniciando registro do SW...')

    navigator.serviceWorker
      .register('/sw.js', { scope: '/' })
      .then((registration) => {
        console.log('[SW] Registrado com sucesso:', registration.scope)

        // Quando um novo SW est√° instalado e esperando para ativar
        function listenForWaitingServiceWorker(reg: ServiceWorkerRegistration) {
          if (reg.waiting) {
            console.log('[SW] SW em espera detectado')
            waitingWorker = reg.waiting // Armazena refer√™ncia
            notifyUpdateAvailable(reg)
            return
          }

          reg.addEventListener('updatefound', () => {
            console.log('[SW] Nova vers√£o encontrada!')
            const newWorker = reg.installing
            if (!newWorker) return

            newWorker.addEventListener('statechange', () => {
              console.log('[SW] Estado alterado:', newWorker.state)
              if (newWorker.state === 'installed') {
                console.log('[SW] Nova vers√£o instalada')

                // Aguarda um pouco para garantir que reg.waiting est√° dispon√≠vel
                setTimeout(() => {
                  if (reg.waiting || newWorker.state === 'installed') {
                    waitingWorker = reg.waiting || newWorker // Armazena refer√™ncia
                    console.log(
                      '[SW] SW aguardando ativa√ß√£o, mostrando notifica√ß√£o'
                    )
                    notifyUpdateAvailable(reg)
                  }
                }, 100)
              }
            })
          })
        }

        listenForWaitingServiceWorker(registration)

        // Verifica atualiza√ß√µes a cada 60 segundos
        setInterval(() => {
          console.log('[SW] Verificando atualiza√ß√µes...')
          registration.update().catch((err) => {
            console.warn('[SW] Erro ao verificar atualiza√ß√£o:', err)
          })
        }, 60000)
      })
      .catch((error) => {
        console.error('[SW] Falha ao registrar SW:', error)
        // N√£o mostrar toast de erro para n√£o assustar o usu√°rio
        // A aplica√ß√£o funciona mesmo sem SW
      })
  })

  // Listener para quando o SW assume controle (ap√≥s atualiza√ß√£o)
  // IMPORTANTE: S√≥ recarrega se o usu√°rio solicitou explicitamente
  navigator.serviceWorker.addEventListener('controllerchange', () => {
    console.log('[SW] Novo SW assumiu controle')

    if (reloadRequested) {
      console.log('[SW] Reload solicitado pelo usu√°rio, recarregando p√°gina...')
      window.location.reload()
    } else {
      console.log('[SW] Reload n√£o solicitado, ignorando controllerchange')
    }
  })
}

function notifyUpdateAvailable(registration: ServiceWorkerRegistration) {
  console.log('[SW] Mostrando notifica√ß√£o de atualiza√ß√£o ao usu√°rio')

  // IMPORTANTE: duration: 0 = toast persiste at√© ser fechado manualmente
  // Infinity n√£o funciona corretamente com Sonner
  toast('üéâ Nova vers√£o dispon√≠vel!', {
    description:
      'H√° uma atualiza√ß√£o com novas funcionalidades. Clique para atualizar agora.',
    action: {
      label: 'Atualizar Agora',
      onClick: () => {
        console.log('[SW] Usu√°rio clicou em atualizar')

        // Tenta pegar o worker de diferentes formas
        const workerToUpdate =
          waitingWorker || registration.waiting || registration.installing

        if (!workerToUpdate) {
          console.warn('[SW] Nenhum SW dispon√≠vel para atualizar')
          console.log('[SW] registration.waiting:', registration.waiting)
          console.log('[SW] registration.installing:', registration.installing)
          console.log('[SW] waitingWorker:', waitingWorker)

          toast.error('Erro ao atualizar', {
            description: 'Recarregue a p√°gina manualmente (Ctrl+Shift+R).',
            duration: 5000,
          })
          return
        }

        console.log('[SW] Enviando mensagem SKIP_WAITING para o SW')
        console.log('[SW] Worker state:', workerToUpdate.state)

        // IMPORTANTE: Marca que o reload foi solicitado pelo usu√°rio
        reloadRequested = true

        // Solicita que o SW em espera ative imediatamente
        workerToUpdate.postMessage({ type: 'SKIP_WAITING' })

        // Feedback visual enquanto atualiza
        toast.loading('Atualizando...', {
          description: 'A p√°gina ser√° recarregada em instantes.',
          duration: 3000,
        })
      },
    },
    duration: 0, // 0 = persiste at√© ser fechado (Infinity n√£o funciona com Sonner)
    important: true, // Prioriza este toast sobre outros
    closeButton: true, // Permite fechar manualmente
  })
}
